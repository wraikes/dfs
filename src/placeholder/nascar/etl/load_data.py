import psycopg2

from nascar.etl.sql_queries import *

def _insert_sportsline_dfs_pro(cursor, data):
    cursor.execute(nascar_sportsline_dfs_pro_insert, (
        data['link_pro'],
        data['title_pro'],
        data['date_pro'],
        data['name'],
        data['dfs_pick_dk'] if 'dfs_pick_dk' in data.keys() else None
    )
)


def _insert_sportsline_betting(cursor, data):
    cursor.execute(nascar_sportsline_betting_insert, (
        data['link_betting'],
        data['title_betting'],
        data['date_betting'],
        data['name'],
        data['pos_betting'] if 'pos_betting' in data.keys() else None,
        data['pos_odds_betting'] if 'pos_odds_betting' in data.keys() else None
    )
)


def _insert_sportsline_leaderboard(cursor, data):
    cursor.execute(nascar_sportsline_leaderboard_insert, (
        data['link_leaderboard'],
        data['title_leaderboard'],
        data['date_leaderboard'],
        data['name'],
        data['pos_leaderboard'] if 'pos_leaderboard' in data.keys() else None
    )
)


def insert_linestarapp_fd(cursor, data, race_id):
    cursor.execute(nascar_linestarapp_insert_fd,
        (
            race_id,
            data['S'],
            data['PID'],
            data['Name'],
            data['POS'],
            data['SAL'],
            data['GID'],
            data['GI'],
            data['GT'],
            data['PPG'],
            data['PP'],
            data['PS'],
            data['SS'],
            data['STAT'],
            data['IS'],
            data['Notes'],
            data['Floor'],
            data['Ceil'],
            data['Conf'],
            data['PTID'],
            data['OTID'],
            data['HTID'],
            data['OE'],
            data['OppRank'],
            data['OppTotal'],
            data['DSPID'],
            data['DGID'],
            data['IMG'],
            data['PTEAM'],
            data['HTEAM'],
            data['OTEAM'],
            data['Lock'],
            data['Id'],
            float(data['Races']),
            float(data['Wins']),
            float(data['Top Fives']),
            float(data['Top Tens']),
            float(data['Avg Finish']),
            float(data['Laps Led/Race']),
            float(data['Fastest Laps/Race']),
            float(data['Avg Pass Diff']),
            float(data['Quality Passes/Race']),
            float(data['FPPG']),
            float(data['Practice Laps']),
            float(data['Practice Best Lap Time']),
            float(data['Practice Best Lap Speed']),
            float(data['Qualifying Pos']) if data['Qualifying Pos'] != '-' else None,
            float(data['Qualifying Best Lap Time']),
            float(data['Qualifying Best Lap Speed']),
            float(data['Laps']),
            float(data['Miles']),
            data['Surface'],
            data['Restrictor Plate?'],
            float(data['Cautions/Race']),
            float(data['Races_3']),
            float(data['Finished']),
            float(data['Wins_3']),
            float(data['Top 5s']),
            float(data['Top 10s']),
            float(data['Avg. Place']),
            float(data['Races_4']),
            float(data['Finished_4']),
            float(data['Wins_4']),
            float(data['Top 5s_4']),
            float(data['Top 10s_4']),
            float(data['Avg. Place_4']),
            float(data['SalaryId']),
            float(data['Owned']),
            float(data['HateCount']) if data['LoveCount'] else 0,
            float(data['LoveCount']) if data['HateCount'] else 0,
            float(data['note_pos']) if data['note_pos'] else float(data['Qualifying Pos']) if data['Qualifying Pos'] != '-' else None,
        )
    )

def insert_linestarapp_dk(cursor, data, race_id):
    cursor.execute(nascar_linestarapp_insert_dk,
        (
            race_id,
            data['S'],
            data['PID'],
            data['Name'],
            data['POS'],
            data['SAL'],
            data['GID'],
            data['GI'],
            data['GT'],
            data['PPG'],
            data['PP'],
            data['PS'],
            data['SS'],
            data['STAT'],
            data['IS'],
            data['Notes'],
            data['Floor'],
            data['Ceil'],
            data['Conf'],
            data['PTID'],
            data['OTID'],
            data['HTID'],
            data['OE'],
            data['OppRank'],
            data['OppTotal'],
            data['DSPID'],
            data['DGID'],
            data['IMG'],
            data['PTEAM'],
            data['HTEAM'],
            data['OTEAM'],
            data['Lock'],
            data['Id'],
            float(data['Races']),
            float(data['Wins']),
            float(data['Top Fives']),
            float(data['Top Tens']),
            float(data['Avg Finish']),
            float(data['Laps Led/Race']),
            float(data['Fastest Laps/Race']),
            float(data['Avg Pass Diff']),
            float(data['Quality Passes/Race']),
            float(data['FPPG']),
            float(data['Practice Laps']),
            float(data['Practice Best Lap Time']),
            float(data['Practice Best Lap Speed']),
            float(data['Qualifying Pos']) if data['Qualifying Pos'] != '-' else None,
            float(data['Qualifying Best Lap Time']),
            float(data['Qualifying Best Lap Speed']),
            float(data['Laps']),
            float(data['Miles']),
            data['Surface'],
            data['Restrictor Plate?'],
            float(data['Cautions/Race']),
            float(data['Races_3']),
            float(data['Finished']),
            float(data['Wins_3']),
            float(data['Top 5s']),
            float(data['Top 10s']),
            float(data['Avg. Place']),
            float(data['Races_4']),
            float(data['Finished_4']),
            float(data['Wins_4']),
            float(data['Top 5s_4']),
            float(data['Top 10s_4']),
            float(data['Avg. Place_4']),
            float(data['SalaryId']),
            float(data['Owned']),
            float(data['HateCount']) if data['LoveCount'] else 0,
            float(data['LoveCount']) if data['HateCount'] else 0,
            float(data['note_pos']) if data['note_pos'] else float(data['Qualifying Pos']) if data['Qualifying Pos'] != '-' else None,
        )
    )
